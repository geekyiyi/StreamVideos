{"ast":null,"code":"import streams from \"../apis/streams\";\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, EDIT_STREAM, DELETE_STREAM } from \"./types\";\nimport history from \"../history\"; // action creator - return an object with type and payload(optional)\n\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n};\nexport const createStream = formValues => async (dispatch, getState) => {\n  //getState can get access to the redux state and pull out some information\n  const {\n    userId\n  } = getState().auth; //create a new object with formvalues(already an object) and userId\n\n  const response = await streams.post(\"/streams\", { ...formValues,\n    userId\n  }); // in addition to add to the database, add the data to the redux state\n\n  dispatch({\n    type: CREATE_STREAM,\n    payload: response.data\n  }); //Do some programmatic navigation to get the user back to the root route\n\n  history.push(\"/\");\n};\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get(\"/streams\"); // response.data is a list of streams\n\n  dispatch({\n    type: FETCH_STREAMS,\n    payload: response.data\n  });\n};\nexport const fetchStream = id => async dispatch => {\n  // fetch the stream from API and dispatch it into redux store and add to the state\n  const response = await streams.get(`/streams/${id}`);\n  dispatch({\n    type: FETCH_STREAM,\n    payload: response.data\n  });\n};\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.put(`/streams/${id}`, formValues);\n  dispatch({\n    type: EDIT_STREAM,\n    payload: response.data\n  });\n  history.push('/');\n};\nexport const deleteStream = id => async dispatch => {\n  await streams.delete(`/streams/${id}`);\n  dispatch({\n    type: DELETE_STREAM,\n    payload: id\n  });\n};","map":{"version":3,"sources":["C:/Users/shuyi/OneDrive/Desktop/Web-Development/React/Udemy/streams/clients/src/actions/index.js"],"names":["streams","SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","EDIT_STREAM","DELETE_STREAM","history","signIn","userId","type","payload","signOut","createStream","formValues","dispatch","getState","auth","response","post","data","push","fetchStreams","get","fetchStream","id","editStream","put","deleteStream","delete"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,SACEC,OADF,EAEEC,QAFF,EAGEC,aAHF,EAIEC,aAJF,EAKEC,YALF,EAMEC,WANF,EAOEC,aAPF,QAQO,SARP;AASA,OAAOC,OAAP,MAAoB,YAApB,C,CAEA;;AACA,OAAO,MAAMC,MAAM,GAAIC,MAAD,IAAY;AAChC,SAAO;AACLC,IAAAA,IAAI,EAAEV,OADD;AAELW,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMG,OAAO,GAAG,MAAM;AAC3B,SAAO;AACLF,IAAAA,IAAI,EAAET;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMY,YAAY,GAAIC,UAAD,IAAgB,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACxE;AACA,QAAM;AAAEP,IAAAA;AAAF,MAAaO,QAAQ,GAAGC,IAA9B,CAFwE,CAGxE;;AACA,QAAMC,QAAQ,GAAG,MAAMnB,OAAO,CAACoB,IAAR,CAAa,UAAb,EAAyB,EAAE,GAAGL,UAAL;AAAiBL,IAAAA;AAAjB,GAAzB,CAAvB,CAJwE,CAKxE;;AACAM,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAER,aAAR;AAAuBS,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAzC,GAAD,CAAR,CANwE,CAOxE;;AACAb,EAAAA,OAAO,CAACc,IAAR,CAAa,GAAb;AACD,CATM;AAWP,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAOP,QAAP,IAAoB;AACpD,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAACwB,GAAR,CAAY,UAAZ,CAAvB,CADoD,CAEpD;;AACAR,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEP,aAAR;AAAuBQ,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAzC,GAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAMI,WAAW,GAAIC,EAAD,IAAQ,MAAOV,QAAP,IAAoB;AACrD;AACA,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAACwB,GAAR,CAAa,YAAWE,EAAG,EAA3B,CAAvB;AAEAV,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEN,YAAR;AAAsBO,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAxC,GAAD,CAAR;AACD,CALM;AAOP,OAAO,MAAMM,UAAU,GAAG,CAACD,EAAD,EAAKX,UAAL,KAAoB,MAAOC,QAAP,IAAoB;AAChE,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAAC4B,GAAR,CAAa,YAAWF,EAAG,EAA3B,EAA8BX,UAA9B,CAAvB;AAEAC,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEL,WAAR;AAAqBM,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAvC,GAAD,CAAR;AACAb,EAAAA,OAAO,CAACc,IAAR,CAAa,GAAb;AACD,CALM;AAOP,OAAO,MAAMO,YAAY,GAAIH,EAAD,IAAQ,MAAOV,QAAP,IAAoB;AACtD,QAAMhB,OAAO,CAAC8B,MAAR,CAAgB,YAAWJ,EAAG,EAA9B,CAAN;AAEAV,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEJ,aAAR;AAAuBK,IAAAA,OAAO,EAAEc;AAAhC,GAAD,CAAR;AACD,CAJM","sourcesContent":["import streams from \"../apis/streams\";\r\nimport {\r\n  SIGN_IN,\r\n  SIGN_OUT,\r\n  CREATE_STREAM,\r\n  FETCH_STREAMS,\r\n  FETCH_STREAM,\r\n  EDIT_STREAM,\r\n  DELETE_STREAM,\r\n} from \"./types\";\r\nimport history from \"../history\";\r\n\r\n// action creator - return an object with type and payload(optional)\r\nexport const signIn = (userId) => {\r\n  return {\r\n    type: SIGN_IN,\r\n    payload: userId,\r\n  };\r\n};\r\n\r\nexport const signOut = () => {\r\n  return {\r\n    type: SIGN_OUT,\r\n  };\r\n};\r\n\r\nexport const createStream = (formValues) => async (dispatch, getState) => {\r\n  //getState can get access to the redux state and pull out some information\r\n  const { userId } = getState().auth;\r\n  //create a new object with formvalues(already an object) and userId\r\n  const response = await streams.post(\"/streams\", { ...formValues, userId });\r\n  // in addition to add to the database, add the data to the redux state\r\n  dispatch({ type: CREATE_STREAM, payload: response.data });\r\n  //Do some programmatic navigation to get the user back to the root route\r\n  history.push(\"/\");\r\n};\r\n\r\nexport const fetchStreams = () => async (dispatch) => {\r\n  const response = await streams.get(\"/streams\");\r\n  // response.data is a list of streams\r\n  dispatch({ type: FETCH_STREAMS, payload: response.data });\r\n};\r\n\r\nexport const fetchStream = (id) => async (dispatch) => {\r\n  // fetch the stream from API and dispatch it into redux store and add to the state\r\n  const response = await streams.get(`/streams/${id}`);\r\n\r\n  dispatch({ type: FETCH_STREAM, payload: response.data });\r\n};\r\n\r\nexport const editStream = (id, formValues) => async (dispatch) => {\r\n  const response = await streams.put(`/streams/${id}`, formValues);\r\n\r\n  dispatch({ type: EDIT_STREAM, payload: response.data });\r\n  history.push('/');\r\n};\r\n\r\nexport const deleteStream = (id) => async (dispatch) => {\r\n  await streams.delete(`/streams/${id}`);\r\n\r\n  dispatch({ type: DELETE_STREAM, payload: id });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
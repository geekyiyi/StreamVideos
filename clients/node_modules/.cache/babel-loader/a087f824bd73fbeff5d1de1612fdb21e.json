{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shuyi\\\\OneDrive\\\\Desktop\\\\Web-Development\\\\React\\\\Udemy\\\\clients\\\\src\\\\components\\\\streams\\\\StreamCreate.js\";\nimport React from \"react\";\nimport { Field, formValues, reduxForm } from \"redux-form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = `field ${meta.error && meta.touched ? \"error\" : \"\"}`;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: className,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...input,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.renderError(meta)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.onSubmit = formValues => {\n      console.log(formValues);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    //touched is a property of meta of the Field that whether the element is being touched\n    if (touched && error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui error message\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // onSubmit is the property of form element\n      // this.props.handleSubmit is the property of the redux form, it already has default event.preventDefault()\n      //this.onSubmit is the function we made as a callback function once the form being submitted\n      // this.props.handleSubmit passes all the formvalue into its callback function\n      _jsxDEV(\"form\", {\n        className: \"ui form error\",\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          name: \"title\",\n          component: this.renderInput,\n          label: \"Enter Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          name: \"description\",\n          component: this.renderInput,\n          label: \"Enter Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ui button primary\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n} //redux form validate function\n\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  } // if return an empty object, then redux form think the form is no errors and can be submitted\n  // if return an object with name of the field and message, it means there is error\n\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: \"streamCreate\",\n  validate\n})(StreamCreate);","map":{"version":3,"sources":["C:/Users/shuyi/OneDrive/Desktop/Web-Development/React/Udemy/clients/src/components/streams/StreamCreate.js"],"names":["React","Field","formValues","reduxForm","StreamCreate","Component","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","console","log","render","props","handleSubmit","validate","errors","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,YAA7C;;;AAEA,MAAMC,YAAN,SAA2BJ,KAAK,CAACK,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SACzCC,WADyC,GAC3B,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,KAAD,KAA4B;AACxC,YAAMC,SAAS,GAAI,SAAQD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,OAA7B,GAAuC,EAAG,EAArE;AACA,0BACE;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA,gCACE;AAAA,oBAAQF;AAAR;AAAA;AAAA;AAAA;AAAA,gBADF,eAKE,sBAAWD,KAAX;AAAkB,UAAA,YAAY,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,gBALF,eAME;AAAA,oBAAM,KAAKM,WAAL,CAAiBJ,IAAjB;AAAN;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAUD,KAbwC;;AAAA,SA0BzCK,QA1ByC,GA0B7BZ,UAAD,IAAgB;AACzBa,MAAAA,OAAO,CAACC,GAAR,CAAYd,UAAZ;AACD,KA5BwC;AAAA;;AAezCW,EAAAA,WAAW,CAAC;AAAEF,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,EAAqB;AAC9B;AACA,QAAIA,OAAO,IAAID,KAAf,EAAsB;AACpB,0BACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,oBAAyBA;AAAzB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAKD;AACF;;AAMDM,EAAAA,MAAM,GAAG;AACP;AAAA;AACE;AACA;AACA;AACA;AACA;AACE,QAAA,SAAS,EAAC,eADZ;AAEE,QAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKL,QAA7B,CAFZ;AAAA,gCAOE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,OAAZ;AAAoB,UAAA,SAAS,EAAE,KAAKR,WAApC;AAAiD,UAAA,KAAK,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA,gBAPF,eAQE,QAAC,KAAD;AACE,UAAA,IAAI,EAAC,aADP;AAEE,UAAA,SAAS,EAAE,KAAKA,WAFlB;AAGE,UAAA,KAAK,EAAC;AAHR;AAAA;AAAA;AAAA;AAAA,gBARF,eAaE;AAAQ,UAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAqBD;;AApDwC,C,CAuD3C;;;AACA,MAAMc,QAAQ,GAAIlB,UAAD,IAAgB;AAC/B,QAAMmB,MAAM,GAAG,EAAf;;AACA,MAAI,CAACnB,UAAU,CAACoB,KAAhB,EAAuB;AACrBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACD;;AACD,MAAI,CAACpB,UAAU,CAACqB,WAAhB,EAA6B;AAC3BF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACD,GAP8B,CAQ/B;AACA;;;AACA,SAAOF,MAAP;AACD,CAXD;;AAaA,eAAelB,SAAS,CAAC;AACvBqB,EAAAA,IAAI,EAAE,cADiB;AAEvBJ,EAAAA;AAFuB,CAAD,CAAT,CAGZhB,YAHY,CAAf","sourcesContent":["import React from \"react\";\r\nimport { Field, formValues, reduxForm } from \"redux-form\";\r\n\r\nclass StreamCreate extends React.Component {\r\n  renderInput = ({ input, label, meta }) => {\r\n    const className = `field ${meta.error && meta.touched ? \"error\" : \"\"}`;\r\n    return (\r\n      <div className={className}>\r\n        <label>{label}</label>\r\n        {/* Field component has its own form props object being passed in its\r\n                \"component\" property and input is one property of it, which also has value and onChange property*/}\r\n        {/* meta contains the error message from validate */}\r\n        <input {...input} autoComplete=\"off\" />\r\n        <div>{this.renderError(meta)}</div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderError({ error, touched }) {\r\n    //touched is a property of meta of the Field that whether the element is being touched\r\n    if (touched && error) {\r\n      return (\r\n        <div className=\"ui error message\">\r\n          <div className=\"header\">{error}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  onSubmit = (formValues) => {\r\n    console.log(formValues);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      // onSubmit is the property of form element\r\n      // this.props.handleSubmit is the property of the redux form, it already has default event.preventDefault()\r\n      //this.onSubmit is the function we made as a callback function once the form being submitted\r\n      // this.props.handleSubmit passes all the formvalue into its callback function\r\n      <form\r\n        className=\"ui form error\"\r\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\r\n      >\r\n        {/* In Field, component property will include an element or function return some elemnt \r\n            that is going to be shown on the screen */}\r\n        {/* {Any extra non-default property(label) we put inside Field element will be passed into component as a prop } */}\r\n        <Field name=\"title\" component={this.renderInput} label=\"Enter Title\" />\r\n        <Field\r\n          name=\"description\"\r\n          component={this.renderInput}\r\n          label=\"Enter Description\"\r\n        />\r\n        <button className=\"ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n//redux form validate function\r\nconst validate = (formValues) => {\r\n  const errors = {};\r\n  if (!formValues.title) {\r\n    errors.title = \"You must enter a title\";\r\n  }\r\n  if (!formValues.description) {\r\n    errors.description = \"You must enter a description\";\r\n  }\r\n  // if return an empty object, then redux form think the form is no errors and can be submitted\r\n  // if return an object with name of the field and message, it means there is error\r\n  return errors;\r\n};\r\n\r\nexport default reduxForm({\r\n  form: \"streamCreate\",\r\n  validate,\r\n})(StreamCreate);\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shuyi\\\\OneDrive\\\\Desktop\\\\Web-Development\\\\React\\\\Udemy\\\\streams\\\\clients\\\\src\\\\components\\\\streams\\\\StreamShow.js\";\nimport React from \"react\";\nimport flv from \"flv.js\";\nimport { connect } from \"react-redux\";\nimport { fetchStream } from \"../../actions\"; // flv download the video stream and then convert it to some file that can actually be played\n//inside of HTML normal video player <video>\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      id\n    } = this.props.match.params;\n    this.props.fetchStream(id); // build player\n\n    this.buildPlayer();\n  }\n\n  componentDidUpdate() {\n    // every time when the component rerender(the stream has been fetched successfully),\n    // the player needed to check whether built or not\n    this.buildPlayer();\n  }\n\n  buildPlayer() {\n    // if the player has already been built or the stream hasn't fetched yet\n    if (this.player || !this.props.stream) {\n      return;\n    } //build the player\n\n\n    const {\n      id\n    } = this.props.match.params;\n    this.player = flv.createPlayer({\n      type: \"flv\",\n      url: `http://localhost:8000/live/${id}.flv`\n    });\n    this.player.attachMediaElement(this.videoRef.current);\n    this.player.load();\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 14\n      }, this);\n    }\n\n    const {\n      title,\n      description\n    } = this.props.stream;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: this.videoRef,\n        style: {\n          width: \"100%\"\n        },\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow);","map":{"version":3,"sources":["C:/Users/shuyi/OneDrive/Desktop/Web-Development/React/Udemy/streams/clients/src/components/streams/StreamShow.js"],"names":["React","flv","connect","fetchStream","StreamShow","Component","constructor","props","videoRef","createRef","componentDidMount","id","match","params","buildPlayer","componentDidUpdate","player","stream","createPlayer","type","url","attachMediaElement","current","load","render","title","description","width","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,eAA5B,C,CAEA;AACA;;;;AACA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,QAAL,gBAAgBR,KAAK,CAACS,SAAN,EAAhB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAS,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAAhC;AACA,SAAKN,KAAL,CAAWJ,WAAX,CAAuBQ,EAAvB,EAFkB,CAGlB;;AACA,SAAKG,WAAL;AACD;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB;AACA;AACA,SAAKD,WAAL;AACD;;AAEDA,EAAAA,WAAW,GAAG;AACZ;AACA,QAAI,KAAKE,MAAL,IAAe,CAAC,KAAKT,KAAL,CAAWU,MAA/B,EAAuC;AACrC;AACD,KAJW,CAKZ;;;AACA,UAAM;AAAEN,MAAAA;AAAF,QAAS,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAAhC;AACA,SAAKG,MAAL,GAAcf,GAAG,CAACiB,YAAJ,CAAiB;AAC7BC,MAAAA,IAAI,EAAE,KADuB;AAE7BC,MAAAA,GAAG,EAAG,8BAA6BT,EAAG;AAFT,KAAjB,CAAd;AAIA,SAAKK,MAAL,CAAYK,kBAAZ,CAA+B,KAAKb,QAAL,CAAcc,OAA7C;AACA,SAAKN,MAAL,CAAYO,IAAZ;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKjB,KAAL,CAAWU,MAAhB,EAAwB;AACtB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AACD,UAAM;AAAEQ,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAyB,KAAKnB,KAAL,CAAWU,MAA1C;AACA,wBACE;AAAA,8BACE;AAAO,QAAA,GAAG,EAAE,KAAKT,QAAjB;AAA2B,QAAA,KAAK,EAAE;AAAEmB,UAAAA,KAAK,EAAE;AAAT,SAAlC;AAAqD,QAAA,QAAQ;AAA7D;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAKF;AAAL;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,kBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AA7CsC;;AAgDzC,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAO;AAAEb,IAAAA,MAAM,EAAEY,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAAClB,KAAT,CAAeC,MAAf,CAAsBF,EAApC;AAAV,GAAP;AACD,CAFD;;AAGA,eAAeT,OAAO,CAAC0B,eAAD,EAAkB;AAAEzB,EAAAA;AAAF,CAAlB,CAAP,CAA0CC,UAA1C,CAAf","sourcesContent":["import React from \"react\";\r\nimport flv from \"flv.js\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchStream } from \"../../actions\";\r\n\r\n// flv download the video stream and then convert it to some file that can actually be played\r\n//inside of HTML normal video player <video>\r\nclass StreamShow extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.videoRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { id } = this.props.match.params;\r\n    this.props.fetchStream(id);\r\n    // build player\r\n    this.buildPlayer();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // every time when the component rerender(the stream has been fetched successfully),\r\n    // the player needed to check whether built or not\r\n    this.buildPlayer();\r\n  }\r\n\r\n  buildPlayer() {\r\n    // if the player has already been built or the stream hasn't fetched yet\r\n    if (this.player || !this.props.stream) {\r\n      return;\r\n    }\r\n    //build the player\r\n    const { id } = this.props.match.params;\r\n    this.player = flv.createPlayer({\r\n      type: \"flv\",\r\n      url: `http://localhost:8000/live/${id}.flv`,\r\n    });\r\n    this.player.attachMediaElement(this.videoRef.current);\r\n    this.player.load();\r\n  }\r\n  render() {\r\n    if (!this.props.stream) {\r\n      return <div>Loading...</div>;\r\n    }\r\n    const { title, description } = this.props.stream;\r\n    return (\r\n      <div>\r\n        <video ref={this.videoRef} style={{ width: \"100%\" }} controls />\r\n        <h1>{title}</h1>\r\n        <h5>{description}</h5>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return { stream: state.streams[ownProps.match.params.id] };\r\n};\r\nexport default connect(mapStateToProps, { fetchStream })(StreamShow);\r\n"]},"metadata":{},"sourceType":"module"}
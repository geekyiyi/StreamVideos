{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shuyi\\\\OneDrive\\\\Desktop\\\\Web-Development\\\\React\\\\Udemy\\\\streams\\\\clients\\\\src\\\\components\\\\streams\\\\StreamCreate.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStream } from \"../../actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onSubmit = formValues => {\n      this.props.createStream(formValues);\n    };\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // onSubmit is the property of form element\n      // this.props.handleSubmit is the property of the redux form, it already has default event.preventDefault()\n      //this.onSubmit is the function we made as a callback function once the form being submitted\n      // this.props.handleSubmit passes all the formvalue into its callback function\n      _jsxDEV(\"form\", {\n        className: \"ui form error\",\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          name: \"title\",\n          component: this.renderInput,\n          label: \"Enter Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          name: \"description\",\n          component: this.renderInput,\n          label: \"Enter Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ui button primary\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n} //redux form validate function\n\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  } // if return an empty object, then redux form think the form is no errors and can be submitted\n  // if return an object with name of the field and message, it means there is error\n\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: \"streamCreate\",\n  validate\n})(StreamCreate);\nexport default connect(null, {\n  createStream\n})(formWrapped);","map":{"version":3,"sources":["C:/Users/shuyi/OneDrive/Desktop/Web-Development/React/Udemy/streams/clients/src/components/streams/StreamCreate.js"],"names":["React","connect","createStream","StreamCreate","Component","onSubmit","formValues","props","render","handleSubmit","renderInput","validate","errors","title","description","formWrapped","reduxForm","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;;;AAEA,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAIzCC,QAJyC,GAI7BC,UAAD,IAAgB;AACzB,WAAKC,KAAL,CAAWL,YAAX,CAAwBI,UAAxB;AACD,KANwC;AAAA;;AAQzCE,EAAAA,MAAM,GAAG;AACP;AAAA;AACE;AACA;AACA;AACA;AACA;AACE,QAAA,SAAS,EAAC,eADZ;AAEE,QAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,YAAX,CAAwB,KAAKJ,QAA7B,CAFZ;AAAA,gCAOE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,OAAZ;AAAoB,UAAA,SAAS,EAAE,KAAKK,WAApC;AAAiD,UAAA,KAAK,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA,gBAPF,eAQE,QAAC,KAAD;AACE,UAAA,IAAI,EAAC,aADP;AAEE,UAAA,SAAS,EAAE,KAAKA,WAFlB;AAGE,UAAA,KAAK,EAAC;AAHR;AAAA;AAAA;AAAA;AAAA,gBARF,eAaE;AAAQ,UAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAqBD;;AA9BwC,C,CAiC3C;;;AACA,MAAMC,QAAQ,GAAIL,UAAD,IAAgB;AAC/B,QAAMM,MAAM,GAAG,EAAf;;AACA,MAAI,CAACN,UAAU,CAACO,KAAhB,EAAuB;AACrBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACD;;AACD,MAAI,CAACP,UAAU,CAACQ,WAAhB,EAA6B;AAC3BF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACD,GAP8B,CAQ/B;AACA;;;AACA,SAAOF,MAAP;AACD,CAXD;;AAaA,MAAMG,WAAW,GAAGC,SAAS,CAAC;AAC5BC,EAAAA,IAAI,EAAE,cADsB;AAE5BN,EAAAA;AAF4B,CAAD,CAAT,CAGjBR,YAHiB,CAApB;AAKA,eAAeF,OAAO,CAAC,IAAD,EAAO;AAAEC,EAAAA;AAAF,CAAP,CAAP,CAAgCa,WAAhC,CAAf","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStream } from \"../../actions\";\r\n\r\nclass StreamCreate extends React.Component {\r\n  \r\n  \r\n\r\n  onSubmit = (formValues) => {\r\n    this.props.createStream(formValues);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      // onSubmit is the property of form element\r\n      // this.props.handleSubmit is the property of the redux form, it already has default event.preventDefault()\r\n      //this.onSubmit is the function we made as a callback function once the form being submitted\r\n      // this.props.handleSubmit passes all the formvalue into its callback function\r\n      <form\r\n        className=\"ui form error\"\r\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\r\n      >\r\n        {/* In Field, component property will include an element or function return some elemnt \r\n            that is going to be shown on the screen */}\r\n        {/* {Any extra non-default property(label) we put inside Field element will be passed into component as a prop } */}\r\n        <Field name=\"title\" component={this.renderInput} label=\"Enter Title\" />\r\n        <Field\r\n          name=\"description\"\r\n          component={this.renderInput}\r\n          label=\"Enter Description\"\r\n        />\r\n        <button className=\"ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n//redux form validate function\r\nconst validate = (formValues) => {\r\n  const errors = {};\r\n  if (!formValues.title) {\r\n    errors.title = \"You must enter a title\";\r\n  }\r\n  if (!formValues.description) {\r\n    errors.description = \"You must enter a description\";\r\n  }\r\n  // if return an empty object, then redux form think the form is no errors and can be submitted\r\n  // if return an object with name of the field and message, it means there is error\r\n  return errors;\r\n};\r\n\r\nconst formWrapped = reduxForm({\r\n  form: \"streamCreate\",\r\n  validate,\r\n})(StreamCreate);\r\n\r\nexport default connect(null, { createStream })(formWrapped);\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shuyi\\\\OneDrive\\\\Desktop\\\\Web-Development\\\\React\\\\Udemy\\\\streams\\\\clients\\\\src\\\\components\\\\GoogleAuth.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { signIn, signOut } from \"../actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GoogleAuth extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onAuthChange = isSignedIn => {\n      if (isSignedIn) {\n        //call action creator and pass the userId into the redux state\n        this.props.signIn(this.auth.currentUser.get().getId());\n      } else {\n        //call signOut action creator\n        this.props.signOut();\n      }\n    };\n\n    this.onSignInClick = () => {\n      // the property of Google Auth instance\n      this.auth.signIn();\n    };\n\n    this.onSignOutClick = () => {\n      this.auth.signOut();\n    };\n  }\n\n  componentDidMount() {\n    // gapi is google api library object\n    //auth2 - google Auth\n    window.gapi.load(\"client:auth2\", () => {\n      //create a client object after initiate\n      window.gapi.client.init({\n        clientId: \"34572091622-apsnvji2q842suesmdfi33sll606gu40.apps.googleusercontent.com\",\n        scope: \"email\"\n      }).then(() => {\n        //this.auth is an instance of the Google Auth object\n        //must initiate the google.auth object and then call this function\n        this.auth = window.gapi.auth2.getAuthInstance(); //get isSignedIn state and set it\n\n        this.onAuthChange(this.auth.isSignedIn.get()); //once the isSignedIn status change, a callback function will be called\n        //Listen for changes in the current user's sign-in state.\n\n        this.auth.isSignedIn.listen(this.onAuthChange);\n      });\n    });\n  }\n\n  renderAuthButton() {\n    if (this.props.isSignedIn === null) {\n      return null;\n    } else if (this.props.isSignedIn) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onSignOutClick,\n        className: \"ui red google button\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"google icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), \"Sign Out\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onSignInClick,\n        className: \"ui green google button\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"google icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), \"Sign In With Google\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.renderAuthButton()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  // isSignedIn property inside authReducer state object\n  return {\n    isSignedIn: state.auth.isSignedIn\n  };\n};\n\nexport default connect(mapStateToProps, {\n  signIn,\n  signOut\n})(GoogleAuth);","map":{"version":3,"sources":["C:/Users/shuyi/OneDrive/Desktop/Web-Development/React/Udemy/streams/clients/src/components/GoogleAuth.js"],"names":["React","connect","signIn","signOut","GoogleAuth","Component","onAuthChange","isSignedIn","props","auth","currentUser","get","getId","onSignInClick","onSignOutClick","componentDidMount","window","gapi","load","client","init","clientId","scope","then","auth2","getAuthInstance","listen","renderAuthButton","render","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,YAAhC;;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SAyBvCC,YAzBuC,GAyBvBC,UAAD,IAAgB;AAC7B,UAAIA,UAAJ,EAAgB;AACd;AACA,aAAKC,KAAL,CAAWN,MAAX,CAAkB,KAAKO,IAAL,CAAUC,WAAV,CAAsBC,GAAtB,GAA4BC,KAA5B,EAAlB;AACD,OAHD,MAGO;AACL;AACA,aAAKJ,KAAL,CAAWL,OAAX;AACD;AACF,KAjCsC;;AAAA,SAmCvCU,aAnCuC,GAmCvB,MAAM;AACpB;AACA,WAAKJ,IAAL,CAAUP,MAAV;AACD,KAtCsC;;AAAA,SAwCvCY,cAxCuC,GAwCtB,MAAM;AACrB,WAAKL,IAAL,CAAUN,OAAV;AACD,KA1CsC;AAAA;;AACvCY,EAAAA,iBAAiB,GAAG;AAClB;AACA;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiB,cAAjB,EAAiC,MAAM;AACrC;AACAF,MAAAA,MAAM,CAACC,IAAP,CAAYE,MAAZ,CACGC,IADH,CACQ;AACJC,QAAAA,QAAQ,EACN,yEAFE;AAGJC,QAAAA,KAAK,EAAE;AAHH,OADR,EAMGC,IANH,CAMQ,MAAM;AACV;AACA;AACA,aAAKd,IAAL,GAAYO,MAAM,CAACC,IAAP,CAAYO,KAAZ,CAAkBC,eAAlB,EAAZ,CAHU,CAIV;;AACA,aAAKnB,YAAL,CAAkB,KAAKG,IAAL,CAAUF,UAAV,CAAqBI,GAArB,EAAlB,EALU,CAMV;AACA;;AACA,aAAKF,IAAL,CAAUF,UAAV,CAAqBmB,MAArB,CAA4B,KAAKpB,YAAjC;AACD,OAfH;AAgBD,KAlBD;AAmBD;;AAqBDqB,EAAAA,gBAAgB,GAAG;AACjB,QAAI,KAAKnB,KAAL,CAAWD,UAAX,KAA0B,IAA9B,EAAoC;AAClC,aAAO,IAAP;AACD,KAFD,MAEO,IAAI,KAAKC,KAAL,CAAWD,UAAf,EAA2B;AAChC,0BACE;AAAQ,QAAA,OAAO,EAAE,KAAKO,cAAtB;AAAsC,QAAA,SAAS,EAAC,sBAAhD;AAAA,gCACE;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBADF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAMD,KAPM,MAOA;AACL,0BACE;AAAQ,QAAA,OAAO,EAAE,KAAKD,aAAtB;AAAqC,QAAA,SAAS,EAAC,wBAA/C;AAAA,gCACE;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBADF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAMD;AACF;;AAEDe,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAA,gBAAM,KAAKD,gBAAL;AAAN;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAlEsC;;AAqEzC,MAAME,eAAe,GAAIC,KAAD,IAAW;AACjC;AACA,SAAO;AAAEvB,IAAAA,UAAU,EAAEuB,KAAK,CAACrB,IAAN,CAAWF;AAAzB,GAAP;AACD,CAHD;;AAKA,eAAeN,OAAO,CAAC4B,eAAD,EAAkB;AAAE3B,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAlB,CAAP,CAA8CC,UAA9C,CAAf","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { signIn, signOut } from \"../actions\";\r\n\r\nclass GoogleAuth extends React.Component {\r\n  componentDidMount() {\r\n    // gapi is google api library object\r\n    //auth2 - google Auth\r\n    window.gapi.load(\"client:auth2\", () => {\r\n      //create a client object after initiate\r\n      window.gapi.client\r\n        .init({\r\n          clientId:\r\n            \"34572091622-apsnvji2q842suesmdfi33sll606gu40.apps.googleusercontent.com\",\r\n          scope: \"email\",\r\n        })\r\n        .then(() => {\r\n          //this.auth is an instance of the Google Auth object\r\n          //must initiate the google.auth object and then call this function\r\n          this.auth = window.gapi.auth2.getAuthInstance();\r\n          //get isSignedIn state and set it\r\n          this.onAuthChange(this.auth.isSignedIn.get());\r\n          //once the isSignedIn status change, a callback function will be called\r\n          //Listen for changes in the current user's sign-in state.\r\n          this.auth.isSignedIn.listen(this.onAuthChange);\r\n        });\r\n    });\r\n  }\r\n\r\n  onAuthChange = (isSignedIn) => {\r\n    if (isSignedIn) {\r\n      //call action creator and pass the userId into the redux state\r\n      this.props.signIn(this.auth.currentUser.get().getId());\r\n    } else {\r\n      //call signOut action creator\r\n      this.props.signOut();\r\n    }\r\n  };\r\n\r\n  onSignInClick = () => {\r\n    // the property of Google Auth instance\r\n    this.auth.signIn();\r\n  };\r\n\r\n  onSignOutClick = () => {\r\n    this.auth.signOut();\r\n  };\r\n\r\n  renderAuthButton() {\r\n    if (this.props.isSignedIn === null) {\r\n      return null;\r\n    } else if (this.props.isSignedIn) {\r\n      return (\r\n        <button onClick={this.onSignOutClick} className=\"ui red google button\">\r\n          <i className=\"google icon\" />\r\n          Sign Out\r\n        </button>\r\n      );\r\n    } else {\r\n      return (\r\n        <button onClick={this.onSignInClick} className=\"ui green google button\">\r\n          <i className=\"google icon\" />\r\n          Sign In With Google\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div>{this.renderAuthButton()}</div>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  // isSignedIn property inside authReducer state object\r\n  return { isSignedIn: state.auth.isSignedIn };\r\n};\r\n\r\nexport default connect(mapStateToProps, { signIn, signOut })(GoogleAuth);\r\n"]},"metadata":{},"sourceType":"module"}